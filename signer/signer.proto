syntax = "proto3";

package proto_signer;

service Signatory {
  rpc BlindSign (BlindedMessage) returns (BlindSignature);
  rpc VerifyProof (Proof) returns (Success);
  rpc Keys (EmptyRequest) returns (KeysResponse);
  rpc KeysById (Id) returns (KeysResponse);
  rpc Keyset (EmptyRequest) returns (KeysetResponse);
  rpc Pubkey (EmptyRequest) returns (PublicKey);
}
message EmptyRequest {}

message Success {
    bool success  = 1;
}
message PublicKey {
    bytes pubkey  = 1;
}

message Id {
    string id  = 1;
}

message Proof {
    uint64 amount = 1;
    string keyset_id = 2;
    bytes secret = 3;
    bytes C = 4;
    optional Witness witness = 5;
    optional ProofDLEQ dleq = 6;
}

message ProofDLEQ {
    bytes e = 1;
    bytes s = 2;
    bytes r = 3;
}

message BlindSignature {
    uint64 amount = 1;
    string keyset_id = 2;
    bytes blinded_secret = 3;
    optional BlindSignatureDLEQ dleq = 4;
}

message BlindSignatureDLEQ {
    bytes e = 1;
    bytes s = 2;
}


// Represents a blinded message
message BlindedMessage {
    uint64 amount = 1;
    string keyset_id = 2;
    bytes blinded_secret = 3;
    optional Witness witness = 4; // This field is optional by default in proto3
}

// Witness type
message Witness {
    oneof witness_type {
        P2PKWitness p2pk_witness = 1;
        HTLCWitness htlc_witness = 2;
    }
}

// P2PKWitness type
message P2PKWitness {
    // List of signatures
    repeated string signatures = 1;
}

// HTLCWitness type
message HTLCWitness {
    // Preimage
    string preimage = 1;

    // List of signatures
    repeated string signatures = 2;
}

message KeysResponse {
  repeated Keys keysets = 1;
}

message KeysetResponse {
  repeated Keyset keysets = 1;
}

message Keys {
  string id = 1;
  string unit = 2;
  map<string, string> keys = 3;
  uint32 input_fee_ppk = 4;
}

message Keyset {
  string id = 1;
  string unit = 2;
  bool active = 3;
  uint32 input_fee_ppk = 4;
}
